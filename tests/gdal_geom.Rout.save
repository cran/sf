
R version 3.3.2 (2016-10-31) -- "Sincere Pumpkin Patch"
Copyright (C) 2016 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> suppressPackageStartupMessages(library(sf))
> 
> nc = st_read(system.file("shape/nc.shp", package="sf"), "nc", crs = 4267,
+ 	agr = c(AREA = "aggregate", PERIMETER = "aggregate", CNTY_ = "identity",
+ 		CNTY_ID = "identity", NAME = "identity", FIPS = "identity", FIPSNO = "identity",
+ 		CRESS_ID = "identity", BIR74 = "aggregate", SID74 = "aggregate", NWBIR74 = "aggregate",
+ 		BIR79 = "aggregate", SID79 = "aggregate", NWBIR79  = "aggregate"), quiet = TRUE)
> 
> st_is_valid(nc)
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> st_is_simple(nc)
  [1] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [16] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [31] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [46] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [61] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [76] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
 [91] TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE TRUE
> 
> nc_tr = st_transform(nc, 3857)
> 
> x = st_buffer(nc_tr, 1000)
> 
> x = st_boundary(nc)
> 
> x = st_convex_hull(nc)
> 
> x = st_simplify(nc_tr, 1e4)
> 
> if (sf:::CPL_geos_version() >= "3.4.0")
+ 	x = st_triangulate(nc_tr)
> 
> mls = st_multilinestring(list(matrix(c(0,0,0,1,1,1,0,0),,2,byrow=TRUE)))
> x = st_polygonize(mls)
> 
> x = st_segmentize(nc_tr, 5e4)
> 
> try(x <- st_segmentize(nc_tr, -0.1))
Error in CPL_gdal_segmentize(x, dfMaxLength) : 
  argument dfMaxLength should be positive

> 
> x = st_centroid(nc_tr)
> 
> a = nc[1:5,]
> b = nc[4:10,]
> 
> x <- st_intersection(a[1,] ,b)
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> u = st_union(b) 
> 
> x <- st_intersection(st_geometry(a), st_geometry(u))
> 
> x = st_union(a[1,], b)
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_union(a, st_union(b))
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_difference(a[1,], b)
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_difference(a, st_union(b))
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_sym_difference(a[1,], b)
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_sym_difference(a, st_union(b))
Warning message:
attribute variables are assumed to be spatially constant throughout all geometries 
> 
> x = st_drivers()
> cat(paste("GDAL has", nrow(x), "drivers\n"))
GDAL has 77 drivers
> 
> # GEOS ops:
> 
> st_relate(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
     [,1]        [,2]        [,3]        [,4]        [,5]        [,6]       
[1,] "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212"
[2,] "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212"
[3,] "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212" "FF2FF1212"
[4,] "2FFF1FFF2" "FF2FF1212" "FF2FF1212" "FF2F11212" "FF2FF1212" "FF2FF1212"
[5,] "FF2FF1212" "2FFF1FFF2" "FF2F11212" "FF2FF1212" "FF2FF1212" "FF2F11212"
     [,7]       
[1,] "FF2FF1212"
[2,] "FF2FF1212"
[3,] "FF2F11212"
[4,] "FF2FF1212"
[5,] "FF2FF1212"
> 
> st_disjoint(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
[1] 1 2 3 4 5 6 7

[[2]]
[1] 1 2 3 4 5 6 7

[[3]]
[1] 1 2 3 4 5 6

[[4]]
[1] 2 3 5 6 7

[[5]]
[1] 1 4 5 7

> 
> st_touches(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
[1] 7

[[4]]
[1] 4

[[5]]
[1] 3 6

> 
> st_crosses(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
integer(0)

[[5]]
integer(0)

> 
> st_within(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> st_contains(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> st_overlaps(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
integer(0)

[[5]]
integer(0)

> 
> st_equals(a, b)
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> st_covers(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> st_covered_by(a, b)
although coordinates are longitude/latitude, it is assumed that they are planar
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> st_equals_exact(a, b, 0.01)
[[1]]
integer(0)

[[2]]
integer(0)

[[3]]
integer(0)

[[4]]
[1] 1

[[5]]
[1] 2

> 
> # st_is_within_distance(a, b, 2)
> 
> st_geometry_type(st_sfc(st_point(1:2), st_linestring(matrix(1:4,2,2))))
[1] POINT      LINESTRING
18 Levels: GEOMETRY POINT LINESTRING POLYGON MULTIPOINT ... TRIANGLE
> 
> st_zm(list(st_point(1:3), st_linestring(matrix(1:6,2,3))))
[[1]]
POINT(1 2)

[[2]]
LINESTRING(1 3, 2 4)

> 
> st_zm(list(st_point(1:2), st_linestring(matrix(1:6,3,2))), add = TRUE, "Z")
[[1]]
POINT(1 2)

[[2]]
LINESTRING(1 4, 2 5, 3 6)

> 
> st_transform(st_sfc(st_point(c(0,0)), crs=4326), st_crs("+proj=geocent"))
Geometry set for 1 feature 
geometry type:  POINT
dimension:      XYZ
bbox:           xmin: 6378137 ymin: 0 xmax: 6378137 ymax: 0
epsg (SRID):    NA
proj4string:    +proj=geocent +ellps=WGS84 +units=m +no_defs
POINTZ(6378137 0 0)
> 
> cbind(st_area(nc_tr[1:5,]), a$AREA)
           [,1]  [,2]
[1,] 1760244757 0.114
[2,]  946435667 0.061
[3,] 2202248253 0.143
[4,] 1074351919 0.070
[5,] 2352539533 0.153
> 
> st_area(st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0)))))
[1] 1
> 
> st_length(st_linestring(rbind(c(0,0),c(0,1))))
[1] 1
> 
> st_length(st_multilinestring(list(rbind(c(0,0),c(0,1)))))
[1] 1
> 
> try(st_length(st_polygon(list(rbind(c(0,0), c(1,0), c(1,1), c(0,1), c(0,0))))))
Error : inherits(x, "sfc_LINESTRING") || inherits(x, "sfc_MULTILINESTRING") is not TRUE
> 
> st_area(st_multilinestring(list(rbind(c(0,0),c(0,1)))))
[1] 0
> 
> # adds the (0.5 0.5) node:
> st_union(st_multilinestring(list(rbind(c(0,0),c(1,1)), rbind(c(0,1), c(1,0)))))
MULTILINESTRING((0 0, 0.5 0.5), (0.5 0.5, 1 1), (0 1, 0.5 0.5), (0.5 0.5, 1 0))
> 
> 
> proc.time()
   user  system elapsed 
  0.560   0.036   0.593 
